{"/home/travis/build/npmtest/node-npmtest-ping/test.js":"/* istanbul instrument in package npmtest_ping */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ping/lib.npmtest_ping.js":"/* istanbul instrument in package npmtest_ping */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ping = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ping = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ping/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ping && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ping */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ping\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ping.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ping.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ping.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ping.__dirname + '/lib.npmtest_ping.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/index.js":"var ping = {};\n\nping.sys = require('./lib/ping-sys');\n//ping.pcap = require('./lib/ping-pcap');\nping.promise = require(\"./lib/ping-promise\");\n\nmodule.exports = ping;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/ping-sys.js":"'use strict';\n\n/**\n* LICENSE MIT\n* (C) Daniel Zelisko\n* http://github.com/danielzzz/node-ping\n*\n* a simple wrapper for ping\n* Now with support of not only english Windows.\n*\n*/\n\n// Promise implementation\nvar ping = require('./ping-promise');\n\n// TODO:\n// 1. Port round trip time to this callback\n// 2. However, it may breaks backward compatability\n// 3. Need discussion\n/**\n * Callback after probing given host\n * @callback probeCallback\n * @param {boolean} isAlive - Whether target is alive or not\n * @param {Object} error - Null if no error occurs\n */\n\n/**\n * Class::Ping construtor\n *\n * @param {string} addr - Hostname or ip addres\n * @param {probeCallback} cb - Callback\n * @param {PingConfig} config - Configuration for command ping\n */\nfunction probe(addr, cb, config) {\n    // Do not reassign function parameter\n    var _config = config || {};\n\n    return ping.probe(addr, _config).then(function (res) {\n        cb(res.alive, null);\n    }).catch(function (err) {\n        cb(null, err);\n    }).done();\n}\n\nexports.probe = probe;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/ping-promise.js":"'use strict';\n\n/**\n* LICENSE MIT\n* (C) Daniel Zelisko\n* http://github.com/danielzzz/node-ping\n*\n* a simple wrapper for ping\n* Now with support of not only english Windows.\n*\n*/\n\n// System library\nvar util = require('util');\nvar cp = require('child_process');\nvar os = require('os');\n\n// 3rd-party library\nvar Q = require('q');\nvar __ = require('underscore');\n\n// Our library\nvar builderFactory = require('./builder/factory');\nvar parserFactory = require('./parser/factory');\n\n/**\n * Class::PromisePing\n *\n * @param {string} addr - Hostname or ip addres\n * @param {PingConfig} config - Configuration for command ping\n * @return {Promise}\n */\nfunction probe(addr, config) {\n    // Do not reassign function argument\n    var _config = config || {};\n\n    // Convert callback base system command to promise base\n    var deferred = Q.defer();\n\n    // Spawn a ping process\n    var ping = null;\n    var platform = os.platform();\n    var argumentBuilder = builderFactory.createBuilder(platform);\n    ping = cp.spawn(\n        builderFactory.getExecutablePath(platform),\n        argumentBuilder.getResult(addr, _config)\n    );\n\n    // Initial parser\n    var parser = parserFactory.createParser(platform);\n\n    // Register events from system ping\n    ping.once('error', function () {\n        var err = new Error(\n            util.format(\n                'ping.probe: %s. %s',\n                'there was an error while executing the ping program. ',\n                'Check the path or permissions...'\n            )\n        );\n        deferred.reject(err);\n    });\n\n    // Cache all lines from the system ping\n    var outstring = [];\n    ping.stdout.on('data', function (data) {\n        outstring.push(String(data));\n    });\n\n    // Parse lines we have on closing system ping\n    ping.once('close', function () {\n        // Merge lines we have and split it by \\n\n        var lines = outstring.join('').split('\\n');\n\n        // Parse line one by one\n        __.each(lines, parser.eat, parser);\n\n        // Get result\n        var ret = parser.getResult();\n\n        deferred.resolve(ret);\n    });\n\n    return deferred.promise;\n}\n\nexports.probe = probe;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/builder/factory.js":"'use strict';\n\nvar __ = require('underscore');\nvar util = require('util');\n\n// Our library\nvar linuxBuilder = require('./linux');\nvar macBuilder = require('./mac');\nvar winBuilder = require('./win');\n\n/**\n * A factory creates argument builders for different platform\n * @constructor\n */\nfunction factory() {}\n\n/**\n * Check out linux platform\n */\nfactory.isLinux = function (p) {\n    var platforms = [\n        'aix',\n        'linux',\n    ];\n\n    return platforms.indexOf(p) >= 0;\n};\n\n/**\n * Check out macos platform\n */\nfactory.isMacOS = function (p) {\n    var platforms = [\n        'darwin',\n        'freebsd',\n    ];\n\n    return platforms.indexOf(p) >= 0;\n};\n\n/**\n * Check out window platform\n */\nfactory.isWindow = function (p) {\n    return p && p.match(/^win/) !== null;\n};\n\n/**\n * Check whether given platform is supported\n * @param {string} p - Name of the platform\n * @return {bool} - True or False\n */\nfactory.isPlatformSupport = function (p) {\n    return __.some([\n        this.isWindow(p),\n        this.isLinux(p),\n        this.isMacOS(p),\n    ]);\n};\n\n/**\n * Return a path to the ping executable in the system\n * @param {string} platform - Name of the platform\n * @return {object} - Argument builder\n * @throw if given platform is not supported\n */\nfactory.getExecutablePath = function (platform) {\n    if (!this.isPlatformSupport(platform)) {\n        throw new Error(util.format('Platform |%s| is not support', platform));\n    }\n\n    var ret = null;\n\n    if (platform === 'aix') {\n        ret = '/usr/sbin/ping';\n    } else if (factory.isLinux(platform)) {\n        ret = '/bin/ping';\n    } else if (factory.isWindow(platform)) {\n        ret = process.env.SystemRoot + '/system32/ping.exe';\n    } else if (factory.isMacOS(platform)) {\n        ret = '/sbin/ping';\n    }\n\n    return ret;\n};\n\n/**\n * Create a builder\n * @param {string} platform - Name of the platform\n * @return {object} - Argument builder\n * @throw if given platform is not supported\n */\nfactory.createBuilder = function (platform) {\n    if (!this.isPlatformSupport(platform)) {\n        throw new Error(util.format('Platform |%s| is not support', platform));\n    }\n\n    var ret = null;\n\n    if (factory.isLinux(platform)) {\n        ret = linuxBuilder;\n    } else if (factory.isWindow(platform)) {\n        ret = winBuilder;\n    } else if (factory.isMacOS(platform)) {\n        ret = macBuilder;\n    }\n\n    return ret;\n};\n\nmodule.exports = factory;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/builder/linux.js":"'use strict';\n\n/**\n * A builder builds command line arguments for ping in linux environment\n * @module lib/builder/linux\n */\nvar util = require('util');\n\nvar builder = {};\n\n/**\n * Cross platform config representation\n * @typedef {Object} PingConfig\n * @property {boolean} numeric - Map IP address to hostname or not\n * @property {number} timeout - Time duration for ping command to exit\n * @property {number} min_reply - Exit after sending number of ECHO_REQUEST\n * @property {string[]} extra - Optional options does not provided\n */\n\nvar defaultConfig = {\n    numeric: true,\n    timeout: 2,\n    min_reply: 1,\n    extra: [],\n};\n\n/**\n * Get the finalized array of command line arguments\n * @param {string} target - hostname or ip address\n * @param {PingConfig} [config] - Configuration object for cmd line argument\n * @return {string[]} - Command line argument according to the configuration\n */\nbuilder.getResult = function (target, config) {\n    var _config = config || {};\n\n    // Empty argument\n    var ret = [];\n\n    // Make every key in config has been setup properly\n    var keys = ['numeric', 'timeout', 'min_reply', 'extra'];\n    keys.forEach(function (k) {\n        // Falsy value will be overrided without below checking\n        if (typeof(_config[k]) !== 'boolean') {\n            _config[k] = _config[k] || defaultConfig[k];\n        }\n    });\n\n    if (_config.numeric) {\n        ret.push('-n');\n    }\n\n    if (_config.timeout) {\n        ret = ret.concat([\n            '-w',\n            util.format('%d', _config.timeout),\n        ]);\n    }\n\n    if (_config.min_reply) {\n        ret = ret.concat([\n            '-c',\n            util.format('%d', _config.min_reply),\n        ]);\n    }\n\n    if (_config.extra) {\n        ret = ret.concat(_config.extra);\n    }\n\n    ret.push(target);\n\n    return ret;\n};\n\nmodule.exports = builder;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/builder/mac.js":"'use strict';\n\n/**\n * A builder builds command line arguments for ping in mac environment\n * @module lib/builder/mac\n */\nvar util = require('util');\n\nvar builder = {};\n\n/**\n * Cross platform config representation\n * @typedef {Object} PingConfig\n * @property {boolean} numeric - Map IP address to hostname or not\n * @property {number} timeout - Time duration for ping command to exit\n * @property {number} min_reply - Exit after sending number of ECHO_REQUEST\n * @property {string[]} extra - Optional options does not provided\n */\n\nvar defaultConfig = {\n    numeric: true,\n    timeout: 2,\n    min_reply: 1,\n    extra: [],\n};\n\n/**\n * Get the finalized array of command line arguments\n * @param {string} target - hostname or ip address\n * @param {PingConfig} [config] - Configuration object for cmd line argument\n * @return {string[]} - Command line argument according to the configuration\n */\nbuilder.getResult = function (target, config) {\n    var _config = config || {};\n\n    // Empty argument\n    var ret = [];\n\n    // Make every key in config has been setup properly\n    var keys = ['numeric', 'timeout', 'min_reply', 'extra'];\n    keys.forEach(function (k) {\n        // Falsy value will be overrided without below checking\n        if (typeof(_config[k]) !== 'boolean') {\n            _config[k] = _config[k] || defaultConfig[k];\n        }\n    });\n\n    if (_config.numeric) {\n        ret.push('-n');\n    }\n\n    if (_config.timeout) {\n        ret = ret.concat([\n            '-t',\n            util.format('%d', _config.timeout),\n        ]);\n    }\n\n    if (_config.min_reply) {\n        ret = ret.concat([\n            '-c',\n            util.format('%d', _config.min_reply),\n        ]);\n    }\n\n    if (_config.extra) {\n        ret = ret.concat(_config.extra);\n    }\n\n    ret.push(target);\n\n    return ret;\n};\n\nmodule.exports = builder;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/builder/win.js":"'use strict';\n\n/**\n * A builder builds command line arguments for ping in window environment\n * @module lib/builder/win\n */\nvar util = require('util');\n\nvar builder = {};\n\n/**\n * Cross platform config representation\n * @typedef {Object} PingConfig\n * @property {boolean} numeric - Map IP address to hostname or not\n * @property {number} timeout - Time duration for ping command to exit\n * @property {number} min_reply - Exit after sending number of ECHO_REQUEST\n * @property {string[]} extra - Optional options does not provided\n */\n\nvar defaultConfig = {\n    numeric: true,\n    timeout: 5,\n    min_reply: 1,\n    extra: [],\n};\n\n/**\n * Get the finalized array of command line arguments\n * @param {string} target - hostname or ip address\n * @param {PingConfig} [config] - Configuration object for cmd line argument\n * @return {string[]} - Command line argument according to the configuration\n */\nbuilder.getResult = function (target, config) {\n    var _config = config || {};\n\n    // Empty argument\n    var ret = [];\n\n    // Make every key in config has been setup properly\n    var keys = ['numeric', 'timeout', 'min_reply', 'extra'];\n    keys.forEach(function (k) {\n        // Falsy value will be overrided without below checking\n        if (typeof(_config[k]) !== 'boolean') {\n            _config[k] = _config[k] || defaultConfig[k];\n        }\n    });\n\n    if (!_config.numeric) {\n        ret.push('-a');\n    }\n\n    if (_config.timeout) {\n        // refs #56: Unit problem\n        // Our timeout is in second while timeout in window is in milliseconds\n        // so we need to convert our units accordingly\n        ret = ret.concat([\n            '-w',\n            util.format('%d', _config.timeout * 1000),\n        ]);\n    }\n\n    if (_config.min_reply) {\n        ret = ret.concat([\n            '-n',\n            util.format('%d', _config.min_reply),\n        ]);\n    }\n\n    if (_config.extra) {\n        ret = ret.concat(_config.extra);\n    }\n\n    ret.push(target);\n\n    return ret;\n};\n\nmodule.exports = builder;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/parser/factory.js":"'use strict';\n\nvar util = require('util');\n\nvar builderFactory = require('../builder/factory');\nvar WinParser = require('./win');\nvar MacParser = require('./mac');\nvar LinuxParser = require('./linux');\n\n/**\n * A factory creates a parser for parsing output from system ping\n * @constructor\n */\nfunction factory() {}\n\n/**\n * Create a parser for a given platform\n * @param {string} platform - Name of the platform\n * @return {object} - Parser\n * @throw if given platform is not supported\n */\nfactory.createParser = function (platform) {\n    if (!builderFactory.isPlatformSupport(platform)) {\n        throw new Error(util.format('Platform |%s| is not support', platform));\n    }\n\n    var ret = null;\n    if (builderFactory.isWindow(platform)) {\n        ret = new WinParser();\n    } else if (builderFactory.isMacOS(platform)) {\n        ret = new MacParser();\n    } else if (builderFactory.isLinux(platform)) {\n        ret = new LinuxParser();\n    }\n\n    return ret;\n};\n\nmodule.exports = factory;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/parser/win.js":"'use strict';\n\nvar util = require('util');\nvar __ = require('underscore');\n\nvar base = require('./base');\n\n/**\n * @constructor\n */\nfunction WinParser() {\n    base.call(this);\n    this._ipv4Regex = /^([0-9]{1,3}\\.){3}[0-9]{1,3}$/;\n}\n\nutil.inherits(WinParser, base);\n\n/**\n * Process output's header\n * @param {string} line - A line from system ping\n */\nWinParser.prototype._processHeader = function (line) {\n    // Get host and numeric_host\n    var tokens = line.split(' ');\n\n    this._response.host = tokens[1];\n    if (this._ipv4Regex.test(this._response.host)) {\n        this._response.numeric_host = tokens[1];\n    } else {\n        this._response.numeric_host = tokens[2].slice(1, -1);\n    }\n\n    this._changeState(this.STATES.BODY);\n};\n\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\nWinParser.prototype._processBody = function (line) {\n    var tokens = line.split(' ');\n    var kvps = __.filter(tokens, function (token) {\n        // Sometime it shows <1ms\n        return token.indexOf('=') >= 0 || token.indexOf('<') >= 0;\n    });\n\n    // kvps.length >= 3 means target is pingable\n    if (kvps.length >= 3) {\n        // XXX: Assume time will alaways get keyword ms for all language\n        var timeKVP = __.find(kvps, function (kvp) {\n            return kvp.indexOf('ms') >= 0;\n        });\n        var regExp = /([0-9\\.]+)/;\n        var match = regExp.exec(timeKVP);\n\n        this._times.push(parseFloat(match[1], 10));\n    }\n\n    // Change state if it see a ':' at the end\n    if (line.slice(-1) === ':') {\n        this._changeState(this.STATES.FOOTER);\n    }\n};\n\n/**\n * Process output's footer\n * @param {string} line - A line from system ping\n */\nWinParser.prototype._processFooter = function (line) {\n    // XXX: Assume there is a keyword ms\n    if (line.indexOf('ms') >= 0) {\n        // XXX: Assume the ordering is Min Max Avg\n        var regExp = /([0-9\\.]+)/g;\n        var m1 = regExp.exec(line);\n        var m2 = regExp.exec(line);\n        var m3 = regExp.exec(line);\n\n        if (__.all([m1, m2, m3])) {\n            this._response.min = parseFloat(m1[1], 10);\n            this._response.max = parseFloat(m2[1], 10);\n            this._response.avg = parseFloat(m3[1], 10);\n            this._changeState(this.STATES.END);\n        }\n    }\n};\n\nmodule.exports = WinParser;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/parser/base.js":"'use strict';\n\n/* eslint no-unused-vars: 0 */\n\nvar __ = require('underscore');\n\n/**\n * Parsed response\n * @typedef {object} PingResponse\n * @param {string} host - The input IP address or HOST\n * @param {string} numeric_host - Target IP address\n * @param {boolean} alive - True for existed host\n * @param {string} output - Raw stdout from system ping\n * @param {number} time - Time (float) in ms for first successful ping response\n * @param {string} min - Minimum time for collection records\n * @param {string} max - Maximum time for collection records\n * @param {string} avg - Average time for collection records\n * @param {string} stddev - Standard deviation time for collected records\n */\n\n/**\n * @constructor\n */\nfunction parser() {\n    // Initial state is 0\n    this._state = 0;\n\n    // Initial cache value\n    this._response = {\n        host: 'unknown',\n        alive: false,\n        output: 'unknown',\n        time: 'unknown',\n        min: 'unknown',\n        max: 'unknown',\n        avg: 'unknown',\n        stddev: 'unknown',\n    };\n\n    // Initial times storage for ping time\n    this._times = [];\n\n    // Initial lines storage for ping output\n    this._lines = [];\n\n    // strip string regexp\n    this._stripRegex = /[ ]*\\r?\\n?$/g;\n}\n\n/**\n * Enum for parser states\n * @readonly\n * @enum {number}\n */\nparser.prototype.STATES = {\n    INIT: 0,\n    HEADER: 1,\n    BODY: 2,\n    FOOTER: 3,\n    END: 4,\n};\n\n/**\n * Change state of this parser\n * @param {number} state - parser.STATES\n * @return {this} - This instance\n */\nparser.prototype._changeState = function (state) {\n    var states = __.values(this.STATES);\n    if (states.indexOf(state) < 0) {\n        throw new Error('Unknown state');\n    }\n\n    this._state = state;\n\n    return this;\n};\n\n/**\n * Process output's header\n * @param {string} line - A line from system ping\n */\nparser.prototype._processHeader = function (line) {\n    throw new Error('Subclass should implement this method');\n};\n\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\nparser.prototype._processBody = function (line) {\n    throw new Error('Subclass should implement this method');\n};\n\n/**\n * Process output's footer\n * @param {string} line - A line from system ping\n */\nparser.prototype._processFooter = function (line) {\n    throw new Error('Subclass should implement this method');\n};\n\n/**\n * Process a line from system ping\n * @param {string} line - A line from system ping\n * @return {this} - This instance\n */\nparser.prototype.eat = function (line) {\n    var headerStates = [\n        this.STATES.INIT,\n        this.STATES.HEADER,\n    ];\n\n    // Store lines\n    this._lines.push(line);\n\n    // Strip all space \\r\\n at the end\n    var _line = line.replace(this._stripRegex, '');\n\n    if (_line.length === 0) {\n        // Do nothing if this is an empty line\n    } else if (headerStates.indexOf(this._state) >= 0) {\n        this._processHeader(_line);\n    } else if (this._state === this.STATES.BODY) {\n        this._processBody(_line);\n    } else if (this._state === this.STATES.FOOTER) {\n        this._processFooter(_line);\n    } else if (this._state === this.STATES.END) {\n        // Do nothing\n    } else {\n        throw new Error('Unknown state');\n    }\n\n    return this;\n};\n\n/**\n * Get results after parsing certain lines from system ping\n * @return {PingResponse} - Response from parsing ping output\n */\nparser.prototype.getResult = function () {\n    var ret = __.extend({}, this._response);\n\n    // Concat output\n    ret.output = this._lines.join('\\n');\n\n    // Determine alive\n    ret.alive = this._times.length > 0;\n\n    // Update time at first successful line\n    if (ret.alive) {\n        ret.time = this._response.time = this._times[0];\n    }\n\n    // Get stddev\n    if (\n        ret.stddev === 'unknown' && ret.alive\n    ) {\n        var N = this._times.length;\n\n        var variances = __.reduce(this._times, function (m, time) {\n            return m + Math.pow((time - ret.avg), 2);\n        }, 0) / N;\n\n        ret.stddev = Math.round(\n            Math.sqrt(variances) * 1000\n        ) / 1000;\n    }\n\n    // Fix min, avg, max, stddev up to 3 decimal points\n    __.each(['min', 'avg', 'max', 'stddev'], function (key) {\n        var v = ret[key];\n        if (__.isNumber(v)) {\n            ret[key] = v.toFixed(3);\n        }\n    });\n\n    return ret;\n};\n\nmodule.exports = parser;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/parser/mac.js":"'use strict';\n\nvar util = require('util');\nvar __ = require('underscore');\n\nvar base = require('./base');\n\n/**\n * @constructor\n */\nfunction MacParser() {\n    base.call(this);\n}\n\nutil.inherits(MacParser, base);\n\n/**\n * Process output's header\n * @param {string} line - A line from system ping\n */\nMacParser.prototype._processHeader = function (line) {\n    // Get host and numeric_host\n    var tokens = line.split(' ');\n\n    this._response.host = tokens[1];\n    this._response.numeric_host = tokens[2].slice(1, -2);\n\n    this._changeState(this.STATES.BODY);\n};\n\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\nMacParser.prototype._processBody = function (line) {\n    // XXX: Assume there is at least 3 '=' can be found\n    var count = (line.match(/=/g) || []).length;\n    if (count >= 3) {\n        var regExp = /([0-9\\.]+)[ ]*ms/;\n        var match = regExp.exec(line);\n        this._times.push(parseFloat(match[1], 10));\n    }\n\n    // Change state if it see a '---'\n    if (line.indexOf('---') >= 0) {\n        this._changeState(this.STATES.FOOTER);\n    }\n};\n\n/**\n * Process output's footer\n * @param {string} line - A line from system ping\n */\nMacParser.prototype._processFooter = function (line) {\n    // XXX: Assume number of keywords '/' more than 3\n    var count = (line.match(/[\\/]/g) || []).length;\n    if (count >= 3) {\n        var regExp = /([0-9\\.]+)/g;\n        // XXX: Assume min avg max stddev\n        var m1 = regExp.exec(line);\n        var m2 = regExp.exec(line);\n        var m3 = regExp.exec(line);\n        var m4 = regExp.exec(line);\n\n        if (__.all([m1, m2, m3, m4])) {\n            this._response.min = parseFloat(m1[1], 10);\n            this._response.avg = parseFloat(m2[1], 10);\n            this._response.max = parseFloat(m3[1], 10);\n            this._response.stddev = parseFloat(m4[1], 10);\n            this._changeState(this.STATES.END);\n        }\n\n        this._changeState(this.STATES.END);\n    }\n};\n\nmodule.exports = MacParser;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/parser/linux.js":"'use strict';\n\nvar util = require('util');\nvar base = require('./base');\nvar MacParser = require('./mac');\n\n/**\n * @constructor\n */\nfunction LinuxParser() {\n    base.call(this);\n}\n\nutil.inherits(LinuxParser, base);\n\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\nLinuxParser.prototype._processHeader = function (line) {\n    // Get host and numeric_host\n    var tokens = line.split(' ');\n\n    this._response.host = tokens[1];\n    this._response.numeric_host = tokens[2].slice(1, -1);\n\n    this._changeState(this.STATES.BODY);\n};\n\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\nLinuxParser.prototype._processBody = function (line) {\n    // Reuse mac parser implementation\n    MacParser.prototype._processBody.call(this, line);\n};\n\n/**\n * Process output's footer\n * @param {string} line - A line from system ping\n */\nLinuxParser.prototype._processFooter = function (line) {\n    // Reuse mac parser implementation\n    MacParser.prototype._processFooter.call(this, line);\n};\n\nmodule.exports = LinuxParser;\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/Gruntfile.js":"'use strict';\n\nmodule.exports = function (grunt) {\n    grunt.initConfig({\n        eslint: {\n            src: ['lib/*.js', 'lib/**/*.js'],\n            options: {\n                configFile: '.eslintrc.json',\n            },\n        },\n        mochaTest: {\n            src: ['test/test-*.js'],\n            options: {\n                reporter: 'dot',\n            },\n        },\n    });\n\n    grunt.loadNpmTasks('gruntify-eslint');\n    grunt.loadNpmTasks('grunt-mocha-test');\n    grunt.registerTask('test', ['eslint', 'mochaTest']);\n};\n","/home/travis/build/npmtest/node-npmtest-ping/node_modules/ping/lib/ping-pcap.js":"/* eslint-disable */\n\n/** \n* LICENSE MIT\n* (C) Daniel Zelisko\n* http://github.com/danielzzz/node-ping\n*\n* A poor man's ping for node.js\n* It uses UDP_scanning (as node is not able to generate iCPM packets)\n* http://en.wikipedia.org/wiki/Port_scanner#UDP_scanning\n* it may not work correct for hosts that silently drop UDP traffic on their firewall\n* you need at pcap version 0.1.9 or higher\n* \n*/\n\nvar sys = require(\"util\"),\npcap = require('pcap');\n    \nvar addr = process.argv[3] || 'localhost';\nsetInterval(function() {probe(addr)}, 1000);\n\n\nfunction probe(addr) {\n    sys.puts('sending a probe to ' + addr);\n    var dgram = require('dgram');\n    var message = new Buffer(\"Some bytes\");\n    var client = dgram.createSocket(\"udp4\");\n    client.send(message, 0, message.length, 21111, addr);\n    client.close(); \n}\n\n// create a pcap session\npcap_session = pcap.createSession(process.argv[2] || 'eth0', \"\");\n\n\n// listen for packets, decode them, and feed the simple printer\npcap_session.addListener('packet', function (raw_packet) {\n    var packet = pcap.decode.packet(raw_packet);\n    if (packet.link && packet.link.ip && packet.link.ip.saddr==addr) {\n        packet.link && packet.link.ip && sys.puts(packet.link.ip.saddr + \" is alive\");\n    }\n});\n\n//-------- example ------------------------\n\n\n"}